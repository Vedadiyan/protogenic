package {{ .ImportPath }}

import (
	"fmt"

	"github.com/gofiber/fiber/v2"
	helpers "github.com/vedadiyan/goal-helpers/pkg"
	"github.com/vedadiyan/goal/pkg/gateways"
	"github.com/vedadiyan/goal/pkg/proxy"
)

var (
	proxies map[string]any
)

{{- range $key, $value := .Gateways }}
func {{ $key }}(c *fiber.Ctx) error {
    type (
        Request = {{ $value.RequestType }}
        Response = {{ $value.ResponseType }}
    )
	var req Request
	err := helpers.GetJSONReq(c, &req)
	if err != nil {
		return err
	}
    proxy, ok := proxies["{{ $key }}"].(*proxy.NATSProxy[*Response])
    if !ok {
        return fmt.Errorf("response cannot be cast to {{ $value.ResponseType }}")
    }
	res, err := proxy.Send(&req)
	if err != nil {
		return err
	}
	return helpers.SendJSONRes(*res, c)
}
{{- end }}

func init() {
	proxies = make(map[string]any)
	gateway := gateways.New("{{ .Route }}")
	{{- range $key, $value := .Gateways }}
    gateway.Add("{{ $key }}", "{{ $.Method }}" , {{ $key }})
    proxies["{{ $key }}"] = proxy.New("{{ $.ConnName }}", "{{ $value.Namespace }}", func() *{{$value.ResponseType}} {
		return &{{$value.ResponseType}}{}
	})
    {{- end }}
    gateways.Register(gateway)
}