// Code generated by protogeinc. DO NOT EDIT.
// versions:
// 	protogenic 	  {{ .ProtogenicVersion }}
// 	protoc        {{ .CompilerVersion }}
// source: {{ .File }}
package {{ .ImportPath }}

import (
	{{- if gt .CacheInterval 0}}
	"time"
	{{- end }}
	"fmt"
	{{- range $key, $value := .WebHeaderCollection }}
    {{- if eq $value.Type "variable" }}
	"os"
	{{ break }}
	{{- end }}
	{{- end }}
	helpers "github.com/vedadiyan/goal-helpers/pkg"
	"github.com/vedadiyan/goal/pkg/http"
	"github.com/vedadiyan/goal/pkg/service"
)

const (
	_CN_{{ .MethodName | ToUpperCase }}          = "{{ .ConnName }}"
	_NS_{{ .MethodName | ToUpperCase }}          = "{{ .Namespace }}"
	_AUTH_SVC_{{ .MethodName | ToUpperCase }}   = "{{ .AuthService }}"
	_AUTH_SVC_CI_{{ .MethodName | ToUpperCase }} = {{ .AuthServiceCacheInterval }}
	_QUEUE_{{ .MethodName | ToUpperCase }}      = "{{ .Queue }}"
	_URL_{{ .MethodName | ToUpperCase }}         = "{{ .Url }}"
	_METHOD_{{ .MethodName | ToUpperCase }}    = "{{ .Method }}"
)

var (
	_url{{ .MethodName | ToPascalCase }}       *http.UrlTemplate
	_reqMapper{{ .MethodName | ToPascalCase }} []byte
	_resMapper{{ .MethodName | ToPascalCase }} []byte
)

type (
	Request{{ .MethodName | ToPascalCase }}  = {{ .RequestType }}
	Response{{ .MethodName | ToPascalCase }} = {{ .ResponseType}}
)

func handler{{ .MethodName | ToPascalCase}}(m *Request{{ .MethodName | ToPascalCase }}) (*Response{{ .MethodName | ToPascalCase }}, error) {
	{{- if and (eq (index .WebHeaderCollection "content-type").Type "static") (eq (index .WebHeaderCollection "content-type").Value "application/x-www-form-urlencoded")}} 
	req, err := helpers.ToURLEncodedReq(m, _reqMapper{{ .MethodName | ToPascalCase }})
	{{- else }}
	req, err := helpers.ToJSONReq(m, _reqMapper{{ .MethodName | ToPascalCase }})
	{{- end }}
	if err != nil {
		return nil, err
	}
	url, err := _url{{ .MethodName | ToPascalCase }}.Url(req.RouteValues, req.QueryParams)
	if err != nil {
		return nil, err
	}
	webHeaders, err := getWHC{{ .MethodName | ToPascalCase }}()
	if err != nil {
		return nil, err
	}
	res, err := http.Send(url, webHeaders, _METHOD_{{ .MethodName | ToUpperCase }} , req.Body)
	if err != nil {
		return nil, err
	}
	if res.Status() > 399 && res.Status() <= 599 {
		return nil, fmt.Errorf(`%d`, res.Status())
	}
	var response Response{{ .MethodName | ToPascalCase }}
	err = helpers.FromJSONRes(res.Reader(), _resMapper{{ .MethodName | ToPascalCase }}, &response)
	if err != nil {
		return nil, err
	}
	return &response, nil
}

func getWHC{{ .MethodName | ToPascalCase }}() (http.IWebHeaderCollection, error) {
	whc := http.NewWebHeaderCollection()
	{{- range $key, $value := .WebHeaderCollection }}
    {{- if eq $value.Type "static" }}
	whc.Add("{{ $key }}", "{{ $value.Value }}")
	{{- else if eq $value.Type "variable" }}
	whc.Add("{{ $key }}", os.Getenv("{{ $value.Value }}"))
	{{- end }} 
    {{- end }}
	if _AUTH_SVC_{{ .MethodName | ToUpperCase }}!= "" {
		webHeaders, err :=
			helpers.GetAuthHeaders(_CN_{{ .MethodName | ToUpperCase }}, _AUTH_SVC_{{ .MethodName | ToUpperCase }} , _AUTH_SVC_CI_{{ .MethodName | ToUpperCase }})
		if err != nil {
			return nil, err
		}
		for key, value := range webHeaders {
			whc.Add(key, value)
		}
	}
	return whc, nil
}

func init() {
	_reqMapper{{ .MethodName | ToPascalCase }} = {{ .RequestMapper }}
	_resMapper{{ .MethodName | ToPascalCase }} = {{ .ResponseMapper }}
	_url{{ .MethodName | ToPascalCase }} = http.NewUrlTemplate(_URL_{{ .MethodName | ToUpperCase }})
	service.Register(
		service.New(
			_CN_{{ .MethodName | ToUpperCase }},
			_NS_{{ .MethodName | ToUpperCase }},
			_QUEUE_{{ .MethodName | ToUpperCase }},
			handler{{ .MethodName | ToPascalCase}},
			{{- if gt .CacheInterval 0}}
			service.WithCache(time.Millisecond * {{ .CacheInterval }}),
			{{- end }}
			{{- if .Callback.OnSuccess }}
			service.WithOnSuccessCallBacks(
				{{- range $item :=  .Callback.OnSuccess }}
					"{{$item}}",
				{{- end }}
			),
			{{- end }}
			{{- if .Callback.OnError }}
			service.WithOnFailureCallBacks(
				{{- range $item :=  .Callback.OnError }}
					"{{$item}}",
				{{- end }}
			),
			{{- end }}
		),
	)
}