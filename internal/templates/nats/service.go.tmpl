package {{ .ImportPath }}

import (
	"time"

	helpers "github.com/vedadiyan/goal-helpers/pkg"
	"github.com/vedadiyan/goal/pkg/http"
	"github.com/vedadiyan/goal/pkg/service"
	"google.golang.org/protobuf/proto"
)

const (
	_CN          = "{{ .ConnName }}"
	_NS          = "{{ .Namespace }}"
	_AUTH_SVC    = "{{ .AuthService }}"
	_AUTH_SVC_CI = {{ .AuthServiceCacheInterval }}
	_QUEUE       = "{{ .Queue }}"
	_URL         = "{{ .Url }}"
	_METHOD      = "{{ .Method }}"
)

var (
	_url       *http.UrlTemplate
	_reqMapper []byte
	_resMapper []byte
)

type (
	Request  = proto.Message
	Response = proto.Message
)

func handler(m Request) (Response, error) {
	req, err := helpers.ToJSONReq(m, _reqMapper)
	if err != nil {
		return nil, err
	}
	url, err := _url.Url(req.RouteValues, req.QueryParams)
	if err != nil {
		return nil, err
	}
	webHeaders, err := getWHC()
	if err != nil {
		return nil, err
	}
	res, err := http.Send(url, webHeaders, _METHOD, req.Body)
	if err != nil {
		return nil, err
	}
	return helpers.FromJSONRes[Response](res.Reader(), _resMapper)
}

func getWHC() (http.IWebHeaderCollection, error) {
	whc := http.NewWebHeaderCollection()
	{{- range $key, $value := .WebHeaderCollection }}
    whc.Add("{{ $key }}", "{{ $value }}")
    {{- end }}
	if _AUTH_SVC != "" {
		webHeaders, err :=
			helpers.GetAuthHeaders(_CN, _AUTH_SVC, _AUTH_SVC_CI)
		if err != nil {
			return nil, err
		}
		for key, value := range webHeaders {
			whc.Add(key, value)
		}
	}
	return whc, nil
}

func init() {
	_reqMapper = {{ .RequestMapper }}
	_resMapper = {{ .ResponseMapper }}
	_url = http.NewUrlTemplate(_URL)
	service.Register(
		service.New(
			_CN,
			_NS,
			_QUEUE,
			handler,
			service.WithCache(time.Hour),
		),
	)
}
