// Code generated by protogeinc. DO NOT EDIT.
// versions:
// 	protogenic 	  {{ .ProtogenicVersion }}
// 	protoc        {{ .CompilerVersion }}
// source: {{ .File }}
package {{ .ImportPath }}

import (
	{{- if gt .CacheInterval 0}}
	"time"
	{{- end }}
	"fmt"
	{{- range $key, $value := .WebHeaderCollection }}
    {{- if eq $value.Type "variable" }}
	"os"
	{{ break }}
	{{- end }}
	{{- end }}
	"github.com/google/uuid"
	helpers "github.com/vedadiyan/goal-helpers/pkg"
	"github.com/vedadiyan/goal/pkg/http"
	"github.com/vedadiyan/goal/pkg/service"
)

func init () {
	type (
		Request  = {{ .RequestType }}
		Response = {{ .ResponseType}}
	)

	const (
		CN          	= "{{ .ConnName }}"
		NS          	= "{{ .Namespace }}"
		AUTH_SVC   		= "{{ .AuthService }}"
		AUTH_SVC_CI 	= {{ .AuthServiceCacheInterval }}
		QUEUE      		= "{{ .Queue }}"
		URL         	= "{{ .Url }}"
		METHOD    		= "{{ .Method }}"
	)

	var (
		urlTemplate       	*http.UrlTemplate
		reqMapper 			[]byte
		resMapper 			[]byte
	)

	reqMapper = {{ .RequestMapper }}
	resMapper = {{ .ResponseMapper }}
	urlTemplate = http.NewUrlTemplate(URL)
	getWHC := func() (http.IWebHeaderCollection, error) {
		whc := http.NewWebHeaderCollection()
		{{- range $key, $value := .WebHeaderCollection }}
		{{- if eq $value.Type "static" }}
		whc.Add("{{ $key }}", "{{ $value.Value }}")
		{{- else if eq $value.Type "variable" }}
		whc.Add("{{ $key }}", os.Getenv("{{ $value.Value }}"))
		{{- end }} 
		{{- end }}
		if AUTH_SVC!= "" {
			webHeaders, err :=
				helpers.GetAuthHeaders(CN, AUTH_SVC , AUTH_SVC_CI)
			if err != nil {
				return nil, err
			}
			for key, value := range webHeaders {
				whc.Add(key, value)
			}
		}
		return whc, nil
	}
	handler := func(m *Request) (*Response, error) {
		id := uuid.New().String()
		constants := map[string]any { "CONTEXT_ID": id }
		{{- if and (eq (index .WebHeaderCollection "content-type").Type "static") (eq (index .WebHeaderCollection "content-type").Value "application/x-www-form-urlencoded")}} 
		req, err := helpers.ToURLEncodedReqWithConstants(m, reqMapper, constants)
		{{- else }}
		req, err := helpers.ToJSONReq(m, reqMapper)
		{{- end }}
		if err != nil {
			return nil, err
		}
		url, err := urlTemplate.Url(req.RouteValues, req.QueryParams)
		if err != nil {
			return nil, err
		}
		webHeaders, err := getWHC()
		if err != nil {
			return nil, err
		}
		res, err := http.Send(url, webHeaders, METHOD , req.Body)
		if err != nil {
			return nil, err
		}
		if res.Status() > 399 && res.Status() <= 599 {
			return nil, fmt.Errorf(`%d`, res.Status())
		}
		var response Response
		err = helpers.FromJSONResWithConstants(res.Reader(), resMapper, &response, constants)
		if err != nil {
			return nil, err
		}
		return &response, nil
	}

	service.Register(
		service.New(
			CN,
			NS,
			QUEUE,
			handler,
			{{- if gt .CacheInterval 0}}
			service.WithCache(time.Millisecond * {{ .CacheInterval }}),
			{{- end }}
			{{- if .Callback.OnSuccess }}
			service.WithOnSuccessCallBacks(
				{{- range $item :=  .Callback.OnSuccess }}
					"{{$item}}",
				{{- end }}
			),
			{{- end }}
			{{- if .Callback.OnError }}
			service.WithOnFailureCallBacks(
				{{- range $item :=  .Callback.OnError }}
					"{{$item}}",
				{{- end }}
			),
			{{- end }}
		),
	)
}