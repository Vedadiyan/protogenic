// Code generated by protogeinc. DO NOT EDIT.
// versions:
// 	protogenic 	  {{ .ProtogenicVersion }}
// 	protoc        {{ .CompilerVersion }}
// source: {{ .File }}
package {{ .ImportPath }}

import (
	"bytes"
	"context"
	"text/template"
    "crypto/sha256"
	"encoding/hex"

	{{- if gt .CacheInterval 0}}
	"time"
	{{- end }}
	"github.com/google/uuid"
	helpers "github.com/vedadiyan/goal-helpers/pkg"
	"github.com/vedadiyan/goal/pkg/di"
	"github.com/vedadiyan/goal/pkg/service"
	"github.com/vedadiyan/genql"
    "github.com/dgraph-io/dgo/v2"
    "google.golang.org/protobuf/encoding/protojson"
)

func init() {
	const (
        DSN		   = "{{ .Dsn }}"
		CN         = "{{ .ConnName }}"
		NS         = "{{ .Namespace }}"
		QUEUE      = "{{ .Queue }}"
	)

	var (
		_query []byte
	)

	type (
		Request  = {{ .RequestType }}
		Response = {{ .ResponseType}}
	)

	_query = {{ .Query }}

    sha256 := sha256.New()
	_, err := sha256.Write()
	if err != nil {
		panic(err)
	}
    hash := sha256.Sum(nil)
    
    template, err := template.New(hex.EncodeToString(hash)).Parse(string(_query))
	if err != nil {
		panic(err)
	}

    unmarshaller := protojson.UnmarshalOptions{DiscardUnknown: true}

	handler := func(m *Request) (*Response, error) {
        client, err := di.ResolveWithName[dgo.Dgraph](DSN, nil)
        if err != nil {
            return nil, err
        }

        var buffer bytes.Buffer
        err = template.Execute(&buffer, m)
        if err != nil {
            return nil, err
        }

        rs, err := client.NewTxn().Query(context.Background(), buffer.String())
        if err != nil {
            return nil, err
        }
		
        var response Response
        err = unmarshaller.Unmarshal(rs.Json, &response)
        if err != nil {
            return nil, err
        }
    
		return &response, nil
	}

	service.Register(
		service.New(
			CN,
			NS,
			QUEUE,
			handler,
			{{- if gt .CacheInterval 0}}
			service.WithCache(time.Millisecond * {{ .CacheInterval }}),
			{{- end }}
			{{- if .Callback.OnSuccess }}
			service.WithOnSuccessCallBacks(
				{{- range $item :=  .Callback.OnSuccess }}
					"{{$item}}",
				{{- end }}
			),
			{{- end }}
			{{- if .Callback.OnError }}
			service.WithOnFailureCallBacks(
				{{- range $item :=  .Callback.OnError }}
					"{{$item}}",
				{{- end }}
			),
			{{- end }}
		),
	)
}