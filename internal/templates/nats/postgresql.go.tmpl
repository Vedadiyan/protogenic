// Code generated by protogeinc. DO NOT EDIT.
// versions:
// 	protogenic 	  {{ .ProtogenicVersion }}
// 	protoc        {{ .CompilerVersion }}
// source: {{ .File }}
package {{ .ImportPath }}

import (
	"time"
	"fmt"

	helpers "github.com/vedadiyan/goal-helpers/pkg"
	"github.com/vedadiyan/goal/pkg/db/postgres"
	"github.com/vedadiyan/goal/pkg/service"
)

const (
	_DSN_{{ .MethodName | ToUpperCase }} 		 = "{{ .Dsn }}"
	_CN_{{ .MethodName | ToUpperCase }}          = "{{ .ConnName }}"
	_NS_{{ .MethodName | ToUpperCase }}          = "{{ .Namespace }}"
	_QUEUE_{{ .MethodName | ToUpperCase }}       = "{{ .Queue }}"
	_TYPE_{{ .MethodName | ToUpperCase }}        = "{{ .Type }}"
)

var (
	_reqMapper{{ .MethodName | ToPascalCase }} []byte
	_resMapper{{ .MethodName | ToPascalCase }} []byte
	_sql{{ .MethodName | ToPascalCase }}       []byte
)

type (
	Request{{ .MethodName | ToPascalCase }}  = {{ .RequestType }}
	Response{{ .MethodName | ToPascalCase }} = {{ .ResponseType}}
)

func handler{{ .MethodName | ToPascalCase}}(m *Request{{ .MethodName | ToPascalCase }}) (*Response{{ .MethodName | ToPascalCase }}, error) {
	arguments, err := helpers.ExecToMap(m, _reqMapper{{ .MethodName | ToPascalCase }})
	if err != nil {
		return nil, err
	}
	res, err := postgres.Handle(_DSN_, _TYPE_, _sql{{ .MethodName | ToPascalCase }}, arguments)
	if err != nil {
		return nil, err
	}
	var response Response{{ .MethodName | ToPascalCase }}
	err := helpers.ExecFromMap(res, _resMapper{{ .MethodName | ToPascalCase }}, &response)
	if err != nil {
		return nil, err
	}
	return &response, nil
}

func init() {
	_reqMapper{{ .MethodName | ToPascalCase }} = {{ .RequestMapper }}
	_resMapper{{ .MethodName | ToPascalCase }} = {{ .ResponseMapper }}
	_sql{{ .MethodName | ToPascalCase }} = {{ .Sql }}
	service.Register(
		service.New(
			_CN_{{ .MethodName | ToUpperCase }},
			_NS_{{ .MethodName | ToUpperCase }},
			_QUEUE_{{ .MethodName | ToUpperCase }},
			handler{{ .MethodName | ToPascalCase}},
			func() *Request{{ .MethodName | ToPascalCase }} {
				return &Request{{ .MethodName | ToPascalCase }}{}
			},
			func() *Response{{ .MethodName | ToPascalCase }} {
				return &Response{{ .MethodName | ToPascalCase }}{}
			},
			service.WithCache(time.Millisecond * {{ .CacheInterval }}),
		),
	)
}
