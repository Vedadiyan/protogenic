// Code generated by protogeinc. DO NOT EDIT.
// versions:
// 	protogenic 	  {{ .ProtogenicVersion }}
// 	protoc        {{ .CompilerVersion }}
// source: {{ .File }}
package {{ .ImportPath }}

import (
	{{- if gt .CacheInterval 0}}
	"time"
	{{- end }}
	"fmt"
	{{- range $key, $value := .WebHeaderCollection }}
    {{- if eq $value.Type "variable" }}
	"os"
	{{ break }}
	{{- end }}
	{{- end }}
	"github.com/google/uuid"
	helpers "github.com/vedadiyan/goal-helpers/pkg"
	"github.com/vedadiyan/goal/pkg/di"
	"github.com/vedadiyan/goal/pkg/http"
	"github.com/vedadiyan/goal/pkg/service"
	"github.com/vedadiyan/genql"
)

func init() {
	const (
		CN         = "{{ .ConnName }}"
		NS         = "{{ .Namespace }}"
		QUEUE      = "{{ .Queue }}"
	)

	var (
		_query []byte
	)

	type (
		Request  = {{ .RequestType }}
		Response = {{ .ResponseType}}
	)

	_query = {{ .Query }}

	handler := func(m *Request) (*Response, error) {
		envs, err := di.ResolveWithName[map[string]any]("ENVS", nil)
		if err != nil {
			return nil, err
		}
		id := uuid.New().String()
		constants := map[string]any{"CONTEXT_ID": id}
		for key, value := range *envs {
			constants[key] = value
		}
		vars := make(map[string]any)
		var response Response
		err := helpers.Exec(m, _query, &response, genql.Wrapped(), genql.PostgresEscapingDialect(), genql.WithConstants(constants), genql.WithVars(vars))
		if err != nil {
			return nil, err
		}
		return &response, nil
	}

	service.Register(
		service.New(
			CN,
			NS,
			QUEUE,
			handler,
			{{- if gt .CacheInterval 0}}
			service.WithCache(time.Millisecond * {{ .CacheInterval }}),
			{{- end }}
			{{- if .Callback.OnSuccess }}
			service.WithOnSuccessCallBacks(
				{{- range $item :=  .Callback.OnSuccess }}
					"{{$item}}",
				{{- end }}
			),
			{{- end }}
			{{- if .Callback.OnError }}
			service.WithOnFailureCallBacks(
				{{- range $item :=  .Callback.OnError }}
					"{{$item}}",
				{{- end }}
			),
			{{- end }}
		),
	)
}