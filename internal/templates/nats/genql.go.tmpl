package {{ .ImportPath }}

import (
	"time"

	helpers "github.com/vedadiyan/goal-helpers/pkg"
	"github.com/vedadiyan/goal/pkg/http"
	"github.com/vedadiyan/goal/pkg/service"
	"google.golang.org/protobuf/proto"
)

const (
	_CN_{{ .MethodName | ToUpperCase }}          = "{{ .ConnName }}"
	_NS_{{ .MethodName | ToUpperCase }}          = "{{ .Namespace }}"
	_QUEUE_{{ .MethodName | ToUpperCase }}      = "{{ .Queue }}"
)

var (
	_query{{ .MethodName | ToPascalCase }} []byte
)

type (
	Request{{ .MethodName | ToPascalCase }}  = {{ .RequestType }}
	Response{{ .MethodName | ToPascalCase }} = {{ .ResponseType}}
)

func handler{{ .MethodName | ToPascalCase}}(m *Request{{ .MethodName | ToPascalCase }}) (*Response{{ .MethodName | ToPascalCase }}, error) {
	res, err := helpers.ToJSONReq(m, _query{{ .MethodName | ToPascalCase }})
	if err != nil {
		return nil, err
	}
	var response Response{{ .MethodName | ToPascalCase }}
	err = helpers.FromJSONRes(res.Reader(), _query{{ .MethodName | ToPascalCase }}, &response)
	if err != nil {
		return nil, err
	}
	return &response, nil
}

func init() {
	_query{{ .MethodName | ToPascalCase }} = {{ .Query }}
	service.Register(
		service.New(
			_CN_{{ .MethodName | ToUpperCase }},
			_NS_{{ .MethodName | ToUpperCase }},
			_QUEUE_{{ .MethodName | ToUpperCase }},
			handler{{ .MethodName | ToPascalCase}},
			func() *Request{{ .MethodName | ToPascalCase }} {
				return &Request{{ .MethodName | ToPascalCase }}{}
			},
			func() *Response{{ .MethodName | ToPascalCase }} {
				return &Response{{ .MethodName | ToPascalCase }}{}
			},
			service.WithCache(time.Hour),
		),
	)
}
