package main

import (
	"strconv"
	"strings"
	 _ "{{ .Import }}"

	"os"
	helpers "github.com/vedadiyan/goal-helpers/pkg"
	auto "github.com/vedadiyan/goal/pkg/config/auto"
	"github.com/vedadiyan/goal/pkg/di"
	"github.com/vedadiyan/goal/pkg/service"
)

func init() {
	{{- range $i, $key := .NatsConns}}
	helpers.AddNats("{{ $key }}")
	{{- end }}
	{{- range $i, $key := .PostgresConns}}
	helpers.AddPostgres("{{ $key }}")
	{{- end }}
	{{- range $i, $key := .UseRedis}}
	helpers.AddRedis("{{ $key }}")
	{{- end }}	
	{{- range $i, $key := .UseMongoDb}}
	helpers.AddMongo("{{ $key }}")
	{{- end }}	
	{{- if .UseInfluxDb }}
	helpers.AddInfluxDb("{{ .UseInfluxDb }}", "{{ .ModuleName }}")
	{{- end }}
	envs := make(map[string]any)
	{{- range $i, $env := .UseEnv }}
	if err := AddEnv("{{$env}}", envs); err != nil {
		panic(err)
	}
	{{- end}} 
	di.AddSinletonWithName("ENVS", func() (instance *map[string]any, err error) {
		return &envs, nil
	})
}

func AddEnv(key string, envs map[string]any) error {
	segments := strings.Split(key, ":")
	keyType := segments[len(segments)-1]
	value := os.Getenv(key)
	switch strings.ToLower(keyType) {
	case "number":
		{
			number, err := strconv.ParseFloat(value, 64)
			if err != nil {
				return err
			}
			envs[key] = number
			return nil
		}
	case "boolean":
		{
			envs[key] = strings.ToLower(value) == "true"
			return nil
		}
	default:
		{
			envs[key] = value
			return nil
		}
	}
}

func main() {
	etcd := os.Getenv("ETCD_URL")
	if len(etcd) == 0 { 
		auto.Bootstrap(auto.ForConfigMap())
	} else {
		auto.Bootstrap(auto.ForETCD(etcd))
	}
	service.Bootstrap()
}
