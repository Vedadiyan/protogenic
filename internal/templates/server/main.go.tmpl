package main

import (
	 _ "{{ .Import }}"

	"os"

	_ "github.com/vedadiyan/gql/pkg/functions/avg"
	_ "github.com/vedadiyan/gql/pkg/functions/concat"
	_ "github.com/vedadiyan/gql/pkg/functions/count"
	_ "github.com/vedadiyan/gql/pkg/functions/first"
	_ "github.com/vedadiyan/gql/pkg/functions/min"
	{{- if .UseMongoDb}}
	mng "github.com/vedadiyan/gql/pkg/functions/mongo"
	{{- end }}
	_ "github.com/vedadiyan/gql/pkg/functions/nullifempty"
	{{- if .UseRedis}}
	rds "github.com/vedadiyan/gql/pkg/functions/redis"
	{{- end }}
	_ "github.com/vedadiyan/gql/pkg/functions/selectkey"
	_ "github.com/vedadiyan/gql/pkg/functions/toarray"
	_ "github.com/vedadiyan/gql/pkg/functions/tobytes"
	_ "github.com/vedadiyan/gql/pkg/functions/todouble"
	_ "github.com/vedadiyan/gql/pkg/functions/toint"
	_ "github.com/vedadiyan/gql/pkg/functions/tostring"
	_ "github.com/vedadiyan/gql/pkg/functions/unwind"
	_ "github.com/vedadiyan/gql/pkg/functions/uuid"
	_ "github.com/vedadiyan/gql/pkg/functions/valueof"

	helpers "github.com/vedadiyan/goal-helpers/pkg"
	auto "github.com/vedadiyan/goal/pkg/config/auto"
	"github.com/vedadiyan/goal/pkg/service"
)

func init() {
	{{- range $i, $key := .NatsConns}}
	helpers.AddNats("{{ $key }}")
	{{- end }}
	{{- range $i, $key := .PostgresConns}}
	helpers.AddPostgres("{{ $key }}")
	{{- end }}
	{{- range $i, $key := .UseRedis}}
	redisConn := redis.NewClient(&redis.Options{
		Addr: "{{ $key }}",
		DB:   0,
	})
	rds.RegisterConManager(func(connKey string) (*redis.Client, error) {
		return redisConn, nil
	})
	{{- end }}	
	{{- range $i, $key := .UseMongoDb}}
	mongoConnection, err := mongo.Connect(context.TODO(), options.Client().ApplyURI("{{ $key }}"))
	mng.RegisterConManager(func(connKey string) (*mongo.Client, error) {
		return mongoConnection, err
	})
	{{- end }}	
	{{- if .UseInfluxDb }}
	helpers.AddInfluxDb("{{ .UseInfluxDb }}", "{{ .ModuleName }}")
	{{- end }}
}

func main() {
	etcd := os.Getenv("ETCD_URL")
	if len(etcd) == 0 { 
		auto.Bootstrap(auto.ForConfigMap())
	} else {
		auto.Bootstrap(auto.ForETCD(etcd))
	}
	service.Bootstrap()
}
