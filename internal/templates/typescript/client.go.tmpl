import axios from "axios";
{{ range $client := . }} 
import { {{ $client.RequestType }}, {{ $client.ResponseType }}} from "./model.pb";
export async function {{ $client.Name | ToLowerCase }}ClientAsync(baseUrl: string, input : {{ $client.RequestType }} {{ if $client.Protected }}, token: string {{ end }}) : Promise<{{ $client.ResponseType }} | Error> {
    let url = `${baseUrl}{{ $client.URL }}/{{ $client.Name }}`
    {{ if $client.QueryParams }} 
    url += '?' + [{{ $client.QueryParams}}].filter(x=> input.$raw[x]).map(x=> `${x}=${input.$raw[x]}`).join('&')
    {{ end }}
    const config = {
        method: '{{ $client.Method }}',
        url: url,
        {{- if and (ne $client.Method "GET") (ne $client.Method "DELETE")}}
        data: input.serialize([{{ $client.URLParams }}]),
        {{- end }}
        headers: { 
            {{- if $client.Protected }}
            'Authorization': `Bearer ${token}`, 
            {{- end }}
            'Content-Type': 'application/json'
        }
    };
    try {
        const response = await axios(config);
        return {{ $client.ResponseType }}.deserialize(response.data)
    }
    catch(exception) {
        return exception as Error
    }
}
{{ end }}